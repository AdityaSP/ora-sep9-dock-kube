Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> range(100)
range(0, 100)
>>> range(5)
range(0, 5)
>>> for i in range(5):
	print*i)
	
SyntaxError: invalid syntax
>>> for i in range(5):
	print(i)

	
0
1
2
3
4
>>> def my_range(start=0, end=10, step=0.5):
	while start <=end :
		print(start)
		start += step

		
>>> my_range(0,3)
0
0.5
1.0
1.5
2.0
2.5
3.0
>>> def my_range(start=0, end=10, step=0.5):
	while start <=end :
		yield start
		start += step

		
>>> for i in my_range(0,3):
	print(i)

	
0
0.5
1.0
1.5
2.0
2.5
3.0
>>> my_range(0,3)
<generator object my_range at 0x00000119BB974AC8>
>>> x = my_range(0,3)
>>> x
<generator object my_range at 0x00000119BB9C7948>
>>> y = range(0,5)
>>> y
range(0, 5)
>>> dir(x)
['__class__', '__del__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__name__', '__ne__', '__new__', '__next__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'close', 'gi_code', 'gi_frame', 'gi_running', 'gi_yieldfrom', 'send', 'throw']
>>> x.__next__
<method-wrapper '__next__' of generator object at 0x00000119BB9C7948>
>>> x.__next__()
0
>>> x.__next__()
0.5
>>> x.__next__()
1.0
>>> x = range(0,2)
>>> x.__next__()
Traceback (most recent call last):
  File "<pyshell#28>", line 1, in <module>
    x.__next__()
AttributeError: 'range' object has no attribute '__next__'
>>> x = my_range(0,2)
>>> 
>>> x.__next__()
0
>>> x.__next__()
0.5
>>> x.__next__()
1.0
>>> x.__next__()
1.5
>>> x.__next__()
2.0
>>> x.__next__()
Traceback (most recent call last):
  File "<pyshell#36>", line 1, in <module>
    x.__next__()
StopIteration
>>> import time
>>> fn_gen = ( 'somename_' + str(time.time()) + ".txt"   for i in range(5))
>>> 
>>> 
>>> fn_gen.__next__()
'somename_1568387085.2421794.txt'
>>> fn_gen.__next__()
'somename_1568387100.1723325.txt'
>>> fn_gen.__next__()
'somename_1568387128.3457556.txt'
>>> fn_gen.__next__()
'somename_1568387131.9283679.txt'
>>> fn_gen.__next__()
'somename_1568387135.451307.txt'
>>> fn_gen.__next__()
Traceback (most recent call last):
  File "<pyshell#46>", line 1, in <module>
    fn_gen.__next__()
StopIteration
>>> def fn_gen():
	for i in range(5):
		yield 'somename_' + str(time.time()) + ".txt"

		
>>> fn_gen.__next__()
Traceback (most recent call last):
  File "<pyshell#51>", line 1, in <module>
    fn_gen.__next__()
AttributeError: 'function' object has no attribute '__next__'
>>> x = fn_gen()
>>> x.__next__()
'somename_1568387235.7819135.txt'
>>> x.__next__()
'somename_1568387239.8880005.txt'
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> a =set()
>>> a
set()
>>> a.add(12)
>>> a
{12}
>>> a.add(14)
>>> a
{12, 14}
>>> a.add(12)
>>> a
{12, 14}
>>> a = {45,67,45,67,23}
>>> type(a)
<class 'set'>
>>> a
{67, 45, 23}
>>> 
>>> 
>>> line = 'one two three one four two'
>>> line.split()
['one', 'two', 'three', 'one', 'four', 'two']
>>> li
Traceback (most recent call last):
  File "<pyshell#76>", line 1, in <module>
    li
NameError: name 'li' is not defined
>>> li = line.split()
>>> li
['one', 'two', 'three', 'one', 'four', 'two']
>>> se = set(li)
>>> se
{'three', 'four', 'two', 'one'}
>>> len(se)
4
>>>  list(se)
 
SyntaxError: unexpected indent
>>> list(se)
['three', 'four', 'two', 'one']
>>> list(se).sort()
>>> x = list(se)
>>> x.sort()
>>> x
['four', 'one', 'three', 'two']
>>> a = set('letters')
>>> 
>>> a
{'r', 's', 'e', 't', 'l'}
>>> b = set('postbox')
>>> b
{'s', 'x', 't', 'o', 'p', 'b'}
>>> a & b
{'s', 't'}
>>> a | b
{'r', 's', 'e', 'x', 't', 'l', 'o', 'p', 'b'}
>>> a - b
{'r', 'l', 'e'}
>>> b - a
{'o', 'b', 'x', 'p'}
>>> a ^ b
{'r', 'e', 'x', 'l', 'o', 'p', 'b'}
>>> se.pop()
'three'
>>> se
{'four', 'two', 'one'}
>>> se.pop()
'four'
>>> se
{'two', 'one'}
>>> se.pop()
'two'
>>> se.pop()
'one'
>>> se.pop()
Traceback (most recent call last):
  File "<pyshell#104>", line 1, in <module>
    se.pop()
KeyError: 'pop from an empty set'
>>> 
